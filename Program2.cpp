/*
* Program2.cpp
*
* Author: Joe Cassidy
* Purpose:
* Date: 25 October, 2018
* Class: CSCI 371
*/

#include <cstdlib>
#include <iostream>
#include <iomanip>
using namespace std;

static int charConvert[256] = {
  34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 5, 34, 34, 34, 32, 6, 34, 34, 34, 34, 1, 9, 2, 13, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 8, 3, 4, 33, 11, 34, 18, 20, 31, 24, 21, 25, 17, 27, 22, 31, 31, 28, 19, 23, 16, 14, 31, 15, 29, 26, 31, 31, 30, 31, 31, 31, 34, 34, 34, 12, 32, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 7, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34
};

int charConverter(int character){
  return charConvert[character];
}

static int stateTable[54][35] = {
  {49, 0, 0, 44, 0, 46, 47, 48, 0, 0, 52, 0, 0, 53, 1, 36, 43, 43, 43, 43, 8, 13, 19, 43, 43, 40, 27, 43, 43, 43, 31, 43, 0, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 2, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 3, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 4, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 5, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 43, 6, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 43, 43, 7, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 43, 43, 43, 43, 9, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 10, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 43, 43, 43, 43, 43, 11, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 43, 43, 43, 43, 43, 43, 12, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 43, 43, 43, 43, 43, 43, 14, 43, 43, 43, 43, 16, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 15, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 17, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 43, 43, 43, 43, 18, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 43, 43, 43, 43, 43, 43, 21, 43, 20, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 22, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 43, 43, 43, 43, 23, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 24, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 43, 43, 43, 43, 25, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 26, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 28, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 43, 43, 43, 43, 29, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 43, 43, 43, 43, 43, 43, 30, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 32, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 43, 43, 43, 43, 43, 33, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 34, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 43, 43, 43, 43, 35, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 43, 43, 43, 43, 37, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 43, 38, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 39, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 41, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {43, 0, 0, 44, 0, 46, 43, 48, 0, 0, 52, 0, 0, 53, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45, 0},
  {49, 0, 0, 44, 0, 46, 47, 48, 0, 0, 52, 0, 0, 53, 1, 36, 43, 43, 43, 43, 8, 13, 19, 43, 43, 40, 27, 43, 43, 43, 31, 43, 0, 45, 0},
  {49, 0, 0, 44, 0, 46, 47, 48, 0, 0, 52, 0, 0, 53, 1, 36, 43, 43, 43, 43, 8, 13, 19, 43, 43, 40, 27, 43, 43, 43, 31, 43, 0, 45, 0},
  {49, 0, 0, 44, 0, 46, 47, 48, 0, 0, 52, 0, 0, 53, 1, 36, 43, 43, 43, 43, 8, 13, 19, 43, 43, 40, 27, 43, 43, 43, 31, 43, 0, 45, 0},
  {49, 0, 0, 44, 0, 46, 0, 48, 0, 0, 52, 0, 0, 53, 1, 36, 43, 43, 43, 43, 8, 13, 19, 43, 43, 40, 27, 43, 43, 43, 31, 43, 0, 45, 0},
  {49, 0, 0, 44, 0, 46, 47, 0, 0, 0, 52, 0, 0, 53, 1, 36, 43, 43, 43, 43, 8, 13, 19, 43, 43, 40, 27, 43, 43, 43, 31, 43, 0, 45, 0},
  {49, 0, 0, 44, 0, 46, 47, 48, 0, 0, 52, 0, 0, 50, 1, 36, 43, 43, 43, 43, 8, 13, 19, 43, 43, 40, 27, 43, 43, 43, 31, 43, 0, 45, 0},
  {51, 0, 0, 44, 0, 46, 47, 48, 0, 0, 52, 0, 0, 53, 1, 36, 43, 43, 43, 43, 8, 13, 19, 43, 43, 40, 27, 43, 43, 43, 31, 43, 0, 45, 0},
  {49, 0, 0, 44, 0, 46, 47, 48, 0, 0, 52, 0, 0, 53, 1, 36, 43, 43, 43, 43, 8, 13, 19, 43, 43, 40, 27, 43, 43, 43, 31, 43, 0, 45, 0},
  {49, 0, 0, 44, 0, 46, 47, 48, 0, 0, 52, 0, 0, 53, 1, 36, 43, 43, 43, 43, 8, 13, 19, 43, 43, 40, 27, 43, 43, 43, 31, 43, 0, 45, 0},
  {51, 0, 0, 44, 0, 46, 47, 48, 0, 0, 52, 0, 0, 53, 1, 36, 43, 43, 43, 43, 8, 13, 19, 43, 43, 40, 27, 43, 43, 43, 31, 43, 0, 45, 0}
};

static int actionTable[54][36] = {
  {-1, 301, 302, -1, 305, -1, -1, -1, 401, 402, -1, 405, 406, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 600, -1},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 100},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 100},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 100},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 100},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 100},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 100},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 501},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 100},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 100},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 100},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 100},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 502},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 100},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 100},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 503},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 100},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 100},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 506},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 100},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 504},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 100},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 100},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 100},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 100},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 100},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 508},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 100},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 100},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 100},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 505},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 100},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 100},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 100},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 100},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 507},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 100},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 100},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 100},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 509},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 100},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 100},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 510},
  {-1, 35, 35, 100, 35, 100, -1, 100, 35, 35, 35, 35, 35, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 100, 600, 100},
  {2, 35, 35, 2, 307, 2, 2, 2, 35, 35, 2, 35, 35, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 600, 303},
  {2, 35, 35, 2, 308, 2, 2, 2, 35, 35, 2, 35, 35, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 600, 304},
  {2, 35, 35, 2, 306, 2, 2, 2, 35, 35, 2, 35, 35, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 600, 2, 600, 600},
  {2, 35, 35, 2, 35, 2, 309, 2, 35, 35, 2, 35, 35, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 600, 600},
  {2, 35, 35, 2, 35, 2, 2, 310, 35, 35, 2, 35, 35, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 600, 600},
  {-1, 35, 35, 2, 35, 2, 2, 2, 35, 35, 2, 35, 35, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2, 600, 200},
  {-1, 35, 35, 2, 35, 2, 2, 2, 35, 35, 2, 35, 35, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 600, 1},
  {-1, 35, 35, 2, 35, 2, 2, 2, 35, 35, 2, 35, 35, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 200, 2, 600, 200},
  {2, 35, 35, 2, 403, 2, 2, 2, 35, 35, 2, 35, 35, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 404, 2, 600, 404},
  {2, 35, 35, 2, 35, 2, 2, 2, 35, 35, 2, 35, 35, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 600, 2, 600, 600}
};

void action(char nextChar, int currentRow){
  switch(actionTable[currentRow][charConverter(nextChar)]){
    //do nothing
    case -1: cout << nextChar;
            break;

    //special cases
    case 1: cout << ' ' << 200 << endl;
            cout << 600 << endl;
            currentRow = 0;
            action(nextChar, currentRow);
            break;
    case 2: cout << ' ' << actionTable[currentRow][35] << endl;
            cout << nextChar;
            currentRow = 0;
            break;

    //end current tag and perform next
    case 35: cout << ' ' << actionTable[currentRow][35] << endl;
            currentRow = 0;
            cout << nextChar << ' ' << actionTable[currentRow][charConverter(nextChar)] << endl;
            break;

    //current tag ends, next tag not yet finished
    default: cout << nextChar << ' ' << actionTable[currentRow][charConverter(nextChar)] << endl;
            break;
  }
}

int main(){
  string nextStr;
  int currentRow = 0;
  while(getline(cin, nextStr)){

    for(int i = 0; i < nextStr.length(); i++){

      char nextChar = nextStr.at(i);
      if(nextChar != ' '){
        //cout << nextChar;

        //action table stuff

        action(nextChar, currentRow);

        //finite state table stuff
        currentRow = stateTable[currentRow][charConverter(nextChar)];
        //cout << currentRow << endl;
      }

      else{
        //output for last element of string
        switch(actionTable[currentRow][35]){
          case -1: break;
          case 1: cout << ' ' << 200 << endl;
                  cout << 600 << endl;
                  currentRow = 0;
                  break;
          default: cout << ' ' << actionTable[currentRow][35] << endl;
                  currentRow = 0;
                  break;
        }
      }
    }
  }
}
